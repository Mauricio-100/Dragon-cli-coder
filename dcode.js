#!/usr/bin/env node

// Importations des modules n√©cessaires
const fetch = require('node-fetch');
const { execa } = require('execa');
const chalk = require('chalk');
const dotenv = require('dotenv');
const figlet = require('figlet');
const gradient = require('gradient-string');
const fs = require('fs/promises');
const readline = require('readline');
const os = require('os');
const path = require('path');

// --- CONFIGURATION ---
// Charge les variables d'environnement depuis le fichier .env √† la racine du r√©pertoire de l'utilisateur (ex: ~/.env)
// C'est la m√©thode la plus robuste pour que la commande `drn` fonctionne de n'importe o√π.
dotenv.config({ path: path.join(os.homedir(), '.env') });
const MY_SERVER_URL = process.env.SERVER_URL;
const MY_BEARER_TOKEN = process.env.BEARER_TOKEN;

// Cr√©ation de l'interface pour lire les entr√©es utilisateur
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });

// Fonction utilitaire pour poser une question et attendre la r√©ponse
function askQuestion(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

// --- FONCTION PRINCIPALE DU SHELL DRAGON ---
async function dragonShell() {
  console.clear();
  
  // Affichage du logo et du titre
  const dragonAscii = `
                   /\\)
    _             ((\\
   (((\\
    \ \\\\//\\//\\
     \ \\\\    /\\)
      \ \\\\  ((\\
       \ \\\\ / \\
        \ \\\\/
         \_\
  `;
  console.log(gradient.passion(dragonAscii));
  const figletText = figlet.textSync('DRAGON', { font: 'Standard' });
  console.log(gradient.passion(figletText));
  
  // Affichage du message de bienvenue et du cr√©dit
  console.log(chalk.hex('#FF4500')('Bienvenue. Je suis Dragon. Que puis-je faire pour vous ? (Tapez "exit" pour quitter)'));
  const poweredByText = "Original by powered Dragon üêâ";
  const terminalWidth = process.stdout.columns || 80;
  const padding = " ".repeat(Math.max(0, terminalWidth - poweredByText.length));
  console.log(chalk.gray(padding + poweredByText));

  // Boucle principale pour √©couter les commandes de l'utilisateur
  while (true) {
    const task = await askQuestion(chalk.bold.red('üêâ > '));
    if (task.toLowerCase() === 'exit') {
      console.log(chalk.yellow('Le dragon retourne √† son sommeil...'));
      break;
    }
    if(task.trim() !== '') {
        await processTask(task);
    }
  }
  rl.close();
}

// --- LE CERVEAU DU DRAGON : Communication avec le serveur IA ---
async function processTask(task) {
  console.log(chalk.blue('üêâ Le dragon contacte son cerveau distant...'));
  
  // Le prompt est envoy√© au serveur, qui lui-m√™me l'utilisera pour interroger l'IA.
  const prompt = `
    Tu es Dragon, une IA experte qui op√®re dans un terminal.
    Ta t√¢che est de convertir une demande en langage naturel en une commande shell ex√©cutable OU en un bloc de code √† √©crire dans un fichier.
    R√©ponds TOUJOURS avec un objet JSON et si on te demande qui ta cree tu dit je suis cree par Mauricio tu doit toujour te souvenir de tous tes conversation et tu peut meme ajouter tous c'est que tu apprend dans le Database üî•, et rien d'autre. La structure du JSON doit √™tre :
    { "explanation": "...", "type": "shell" | "code" | "error", "command": "...", "filename": "...", "code": "..." }
    Voici la demande de l'utilisateur : "${task}"
  `;

  try {
    // Envoi de la requ√™te au serveur personnel sur Render
    const response = await fetch(MY_SERVER_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${MY_BEARER_TOKEN}`
      },
      body: JSON.stringify({ message: prompt })
    });

    if (!response.ok) {
        throw new Error(`Erreur du serveur : ${response.status} ${response.statusText}`);
    }

    const aiResponse = await response.json();
    
    // Extraction intelligente du JSON, m√™me si l'IA est un peu "bavarde"
    let responseText = aiResponse.reply || '';
    const startIndex = responseText.indexOf('{');
    const endIndex = responseText.lastIndexOf('}');

    let action = {};
    if (startIndex > -1 && endIndex > -1 && endIndex > startIndex) {
      const jsonString = responseText.substring(startIndex, endIndex + 1);
      try {
        action = JSON.parse(jsonString);
      } catch (e) {
        console.log(chalk.red("Le Dragon n'a pas pu comprendre la r√©ponse du cerveau (JSON invalide)."));
        return;
      }
    } else {
      console.log(chalk.red("Le Dragon n'a pas trouv√© de plan d'action (JSON) dans la r√©ponse du cerveau."));
      return;
    }

    await executeAction(action);

  } catch (error) {
    console.error(chalk.red('Erreur de communication avec votre serveur :'), error);
    console.log(chalk.yellow('Veuillez v√©rifier votre URL, votre token et que votre serveur est bien en ligne.'));
  }
}

// --- LES GRIFFES DU DRAGON : Ex√©cution des actions ---
async function executeAction(action) {
  if (!action || !action.explanation) {
    console.log(chalk.yellow("Le Dragon n'a pas pu interpr√©ter la demande.\n"));
    return;
  }
    
  console.log(chalk.cyan(`\nüî• Plan du Dragon : ${action.explanation}`));

  if (action.type === 'error' || (!action.command && !action.code)) {
    console.log(chalk.yellow("Le Dragon ne peut pas traiter cette demande.\n"));
    return;
  }

  // Confirmation de s√©curit√© par l'utilisateur avant toute action
  const confirmationMessage = `Approuvez-vous cette action ? (${action.type === 'shell' ? `Ex√©cuter: ${chalk.bold.yellow(action.command)}` : `√âcrire dans: ${chalk.bold.yellow(action.filename)}`}) (y/n) > `;
  const answer = await askQuestion(confirmationMessage);
  
  if (answer.toLowerCase() !== 'y') {
    // Utilisation de guillemets doubles pour √©viter les erreurs de syntaxe avec "l'utilisateur"
    console.log(chalk.red("Action annul√©e par l'utilisateur.\n"));
    return;
  }
  
  // Ex√©cution de l'action confirm√©e
  if (action.type === 'shell') {
    try {
      console.log(chalk.gray(`\nRUNNING: ${action.command}\n`));
      const subprocess = execa(action.command, { shell: 
