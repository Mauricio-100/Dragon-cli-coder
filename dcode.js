#!/usr/bin/env node

// Nouvelle syntaxe d'importation (ES Module)
import { program } from 'commander';
import chalk from 'chalk';
import ora from 'ora';
import fs from 'fs';
import path from 'path';
import { pipeline } from '@xenova/transformers';

// --- Description du Robot (Version 3.0 : L'√ätre Pensant) ---
program
  .name('dcode')
  .description(chalk.yellow('üêâ Un golem de code autonome qui pense avec une IA locale.'))
  .version('3.0.0');

// --- COMMANDE : CR√âER (Inchang√© pour l'instant) ---
program
  .command('create <filename>')
  .description('Cr√©e un nouveau script √† partir d\'un gabarit.')
  .action((filename) => {
    // ... code de la commande 'create' ...
    console.log(chalk.cyan(`Le Golem forge le fichier ${filename}...`));
    try {
        const templatePath = path.join(process.cwd(), 'templates', 'basic_node.js');
        const templateCode = fs.readFileSync(templatePath, 'utf-8');
        fs.writeFileSync(filename, templateCode);
        console.log(chalk.green(`Fichier ${chalk.bold(filename)} cr√©√© avec succ√®s !`));
    } catch (error) {
        console.error(chalk.red('√âchec de la forge :'), error.message);
    }
  });


// --- LA NOUVELLE COMMANDE : L'√ÇME DU GOLEM ---
program
  .command('think <prompt>')
  .description('Demande au Golem de penser et de g√©n√©rer du code Python.')
  .action(async (prompt) => {
    const spinner = ora(chalk.cyan('Le Golem se pr√©pare √† penser...')).start();
    
    try {
        // La premi√®re fois, cette ligne va t√©l√©charger le mod√®le.
        // Les fois suivantes, elle le chargera depuis le cache.
        spinner.text = chalk.yellow('Le Golem invoque le Grimoire du Code... (t√©l√©chargement unique)');
        const coder = await pipeline('text-generation', 'Xenova/tiny_starcoder_py');
        
        spinner.text = chalk.yellow('Le Grimoire est ouvert. Le Golem r√©fl√©chit √† votre requ√™te...');

        const output = await coder(prompt, {
            max_new_tokens: 256, // On limite la longueur pour aller plus vite
            temperature: 0.7, // Un peu de cr√©ativit√©
            repetition_penalty: 1.1, // √âvite de se r√©p√©ter
        });

        spinner.succeed(chalk.green('Le Golem a parl√© !'));

        // On nettoie la sortie pour n'afficher que le code g√©n√©r√©.
        const generatedCode = output[0].generated_text.replace(prompt, '').trim();

        console.log(chalk.gray('\n--- Code Forg√© par la Pens√©e ---'));
        console.log(chalk.blue(generatedCode));
        console.log(chalk.gray('--- Fin de la Pens√©e ---\n'));

    } catch (error) {
        spinner.fail(chalk.red('Le Golem a rencontr√© une erreur lors de sa m√©ditation :'));
        console.error(error);
    }
  });


program.parse(process.argv);
